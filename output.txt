/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
/home/kaushik/Desktop/Kaushik_MTP/robust-bayesian-recourse/rbr/rbr.py:44: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.train_data = torch.tensor(train_data).float()
data generated
first model trained
both models trained
488
data generated
first model trained
both models trained
502
data generated
first model trained
both models trained
475
data generated
first model trained
both models trained
483
data generated
first model trained
both models trained
511
data generated
first model trained
both models trained
500
data generated
first model trained
both models trained
523
data generated
first model trained
both models trained
514
data generated
first model trained
both models trained
502
data generated
first model trained
both models trained
473
data generated
first model trained
both models trained
509
data generated
first model trained
both models trained
499
data generated
first model trained
both models trained
503
data generated
first model trained
both models trained
502
data generated
first model trained
both models trained
500
data generated
first model trained
both models trained
482
data generated
first model trained
both models trained
485
[0.29098360655737704, 0.3565737051792829, 0.32842105263157895, 0.09523809523809523, 0.011741682974559686, 0.05, 0.4378585086042065, 0.0019455252918287938, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04780876494023904, 0.0, 0.0, 0.002061855670103093]
[-1.1, -0.9625, -0.825, -0.6875, -0.55, -0.4125, -0.275, -0.1375, 0.0, 0.1375, 0.275, 0.4125, 0.55, 0.6875, 0.825, 0.9625, 1.1]
